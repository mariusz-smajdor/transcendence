#!/bin/bash

# Network Setup Script for Transcendence Project
# This script helps configure the project for multi-computer development

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üåê Transcendence Network Setup${NC}"
echo "=================================="

# Function to get local IP address
get_local_ip() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | head -1
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        hostname -I | awk '{print $1}'
    else
        echo "127.0.0.1"
    fi
}

# Function to check if port is available
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 1  # Port is in use
    else
        return 0  # Port is available
    fi
}

# Function to create environment file
create_env_file() {
    local server_ip=$1
    local client_ip=$2
    
    echo -e "${BLUE}üìù Creating environment configuration...${NC}"
    
    cat > .env << EOF
# Environment Configuration for Transcendence Project
# Generated by network setup script

# Server Configuration
PORT=3000
JWT_SECRET=transcendence-dev-jwt-secret-$(date +%s)
COOKIES_SECRET=transcendence-dev-cookies-secret-$(date +%s)

# Google OAuth Configuration (Update these with your actual values)
GOOGLE_CLIENT_ID=your-google-client-id-here
GOOGLE_CLIENT_SECRET=your-google-client-secret-here

# Network Configuration
SERVER_HOST=0.0.0.0
CLIENT_HOST=0.0.0.0
SERVER_IP=$server_ip
CLIENT_IP=$client_ip

# SSL Configuration
SSL_ENABLED=true
SSL_KEY_PATH=./server/certs/server.key
SSL_CERT_PATH=./server/certs/server.crt

# Client SSL Configuration
CLIENT_SSL_KEY_PATH=./client/certs/localhost.key
CLIENT_SSL_CERT_PATH=./client/certs/localhost.crt
EOF

    echo -e "${GREEN}‚úÖ Environment file created: .env${NC}"
}

# Function to create client environment file
create_client_env_file() {
    local server_ip=$1
    
    echo -e "${BLUE}üìù Creating client environment configuration...${NC}"
    
    cat > client/.env << EOF
# Client Environment Configuration
# Generated by network setup script

# Server connection settings
VITE_SERVER_URL=https://$server_ip:3000
VITE_WS_URL=wss://$server_ip:3000
VITE_CLIENT_PORT=8080
VITE_CLIENT_HOST=0.0.0.0
EOF

    echo -e "${GREEN}‚úÖ Client environment file created: client/.env${NC}"
}

# Function to update certificates for remote access
update_certificates() {
    local server_ip=$1
    
    echo -e "${BLUE}üîê Updating SSL certificates for remote access...${NC}"
    
    # Check if certificates exist
    if [ ! -f "server/certs/server.key" ] || [ ! -f "server/certs/server.crt" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Server certificates not found. Generating new ones...${NC}"
        ./generate-certs.sh
    fi
    
    # Generate new certificates with the server IP
    echo -e "${BLUE}üîë Generating certificates for IP: $server_ip${NC}"
    
    # Server certificate
    openssl genrsa -out server/certs/server.key 2048
    openssl req -new -x509 -key server/certs/server.key -out server/certs/server.crt -days 365 \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=$server_ip" \
        -addext "subjectAltName=DNS:localhost,DNS:server,DNS:$server_ip,IP:127.0.0.1,IP:$server_ip"
    
    # Client certificate
    openssl genrsa -out client/certs/localhost.key 2048
    openssl req -new -x509 -key client/certs/localhost.key -out client/certs/localhost.crt -days 365 \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost" \
        -addext "subjectAltName=DNS:localhost,DNS:$server_ip,IP:127.0.0.1,IP:$server_ip"
    
    echo -e "${GREEN}‚úÖ Certificates updated for remote access${NC}"
}

# Function to display network information
display_network_info() {
    local server_ip=$1
    local client_ip=$2
    
    echo -e "\n${BLUE}üìã Network Configuration Summary${NC}"
    echo "======================================"
    echo -e "${GREEN}Server IP:${NC} $server_ip"
    echo -e "${GREEN}Client IP:${NC} $client_ip"
    echo -e "${GREEN}Server Port:${NC} 3000 (HTTP) / 3443 (HTTPS)"
    echo -e "${GREEN}Client Port:${NC} 8080"
    echo ""
    echo -e "${BLUE}üåê Access URLs:${NC}"
    echo "  Server: https://$server_ip:3000"
    echo "  Client: https://$client_ip:8080"
    echo ""
    echo -e "${BLUE}üîó For other computers to connect:${NC}"
    echo "  1. Use the server IP: https://$server_ip:3000"
    echo "  2. Use the client IP: https://$client_ip:8080"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Important Notes:${NC}"
    echo "  - Make sure firewall allows ports 3000, 3443, and 8080"
    echo "  - Other computers need to accept self-signed certificates"
    echo "  - Update Google OAuth settings with your server IP"
}

# Function to check prerequisites
check_prerequisites() {
    echo -e "${BLUE}üîç Checking prerequisites...${NC}"
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker is not installed. Please install Docker first.${NC}"
        exit 1
    fi
    
    # Check if Docker Compose is installed
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose is not installed. Please install Docker Compose first.${NC}"
        exit 1
    fi
    
    # Check if OpenSSL is installed
    if ! command -v openssl &> /dev/null; then
        echo -e "${RED}‚ùå OpenSSL is not installed. Please install OpenSSL first.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ All prerequisites are installed${NC}"
}

# Main execution
main() {
    echo -e "${BLUE}üöÄ Starting network setup...${NC}"
    
    # Check prerequisites
    check_prerequisites
    
    # Get local IP addresses
    local server_ip=$(get_local_ip)
    local client_ip=$(get_local_ip)
    
    echo -e "${GREEN}üìç Detected IP addresses:${NC}"
    echo "  Server IP: $server_ip"
    echo "  Client IP: $client_ip"
    
    # Check if ports are available
    if ! check_port 3000; then
        echo -e "${YELLOW}‚ö†Ô∏è  Port 3000 is in use. You may need to stop other services.${NC}"
    fi
    
    if ! check_port 8080; then
        echo -e "${YELLOW}‚ö†Ô∏è  Port 8080 is in use. You may need to stop other services.${NC}"
    fi
    
    # Create environment files
    create_env_file "$server_ip" "$client_ip"
    create_client_env_file "$server_ip"
    
    # Update certificates
    update_certificates "$server_ip"
    
    # Display network information
    display_network_info "$server_ip" "$client_ip"
    
    echo -e "\n${GREEN}üéâ Network setup completed successfully!${NC}"
    echo -e "${BLUE}üìñ Next steps:${NC}"
    echo "  1. Update Google OAuth settings in .env file"
    echo "  2. Run: docker-compose up --build"
    echo "  3. Access the application at: https://$client_ip:8080"
    echo "  4. Share the server IP with other developers: $server_ip"
}

# Run main function
main "$@"
